#include "background.h"#include "OGL/OGL.h"#include <stdlib.h>#include <vector>#include <iostream>using namespace std;Point::Point(int X, int Y, int ANGLE, int SPEED){    x = X; y = Y; angle = ANGLE; speed = SPEED;    STOPPER = 40;    LOOPS = 0;}void Point::update(){    int mult = 1;    if (LOOPS == 0){ mult = 2; }    x += mult*sin(angle*PI/180)*speed;    y += mult*cos(angle*PI/180)*speed;    OGL::dibujar_cuadrado(4,4,x,y,OGL::c(255,255,255));    if (LOOPS % STOPPER == 0) {        speed++;        if (STOPPER > 1) {            STOPPER /= 2;        }    }    LOOPS++;}int Point::get_x(){    return x;}int Point::get_y(){    return y;}Background::Background(){    background = OGL::color_change();    background.r = 100;    background.min_color = 100;    background.max_color = 200;    background.scale = 0.7;}void Background::update(){    background.update();    OGL::update_background(background.r, background.g, background.b);    for (int x = 0; x < 2; x++) {        Point act_point = Point(OGL::screen->w/2,OGL::screen->h/2,rand()%361,5);        points.push_back(act_point);    }    if (LOOPS % 1 == 0){        for (int x = 0; x < points.size(); x++) {            points[x].update();            int PX = points[x].get_x();            int PY = points[x].get_y();            if (not (PX > 0 && PX < OGL::screen->w && PY > 0 && PY < OGL::screen->h)) {                points.erase(points.begin()+x);            }        }    }    LOOPS++;}